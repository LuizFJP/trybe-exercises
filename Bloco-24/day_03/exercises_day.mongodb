use("filmesExercises");
// 1 - Utilizando o operador $all , retorne todos os filmes que contenham action e adventure no array category .
// db.filmesExercises.find({category: { $all: ["action","adventure"]}});

// 2 - Agora retorne os filmes que contenham action no array category e possuem nota do IMDB maior do que 7 .

// db.filmesExercises.find({$and: [{category: "action"}, {imdbRating: {$gt: 7}}]});

// 3 - Adicione um array chamado ratings ao filme Batman com os seguintes valores: [85, 100, 102, 105] . Dica: lembre-se do operador $each visto no dia anterior.

// db.filmesExercises.updateOne({title: "Batman"}, {$push: {ratings: {$each: [85, 100, 102, 105]}}});

// 4 - Adicione um array chamado ratings ao filme Godzilla com os seguintes valores: [78, 52, 95, 102] .

// db.filmesExercises.updateOne({title: "Godzilla"}, {$push: {ratings: {$each: [78, 52, 95, 102]}}});

// 5 - Adicione um array chamado ratings ao filme Home Alone com os seguintes valores: [200, 99, 65] .

// db.filmesExercises.updateOne({title: "Home Alone"}, {$push: {ratings: {$each: [200, 99, 65]}}})

// 6 - Retorne todos os filmes com ratings maior do que 103 , exibindo apenas os campos title e ratings .

// db.filmesExercises.find({ratings: {$gt: 103}}, {title: true, ratings: true, _id: false});

// 7 - Retorne todos os filmes com ratings entre 100 e 105 , exibindo apenas os campos title e ratings .

// db.filmesExercises.find({ratings: {$elemMatch: {$gt: 100, $lt: 105}}}, {title: true, ratings: true,_id: false});

// 8 - Retorne todos os filmes com ratings entre 64 e 105 e divis√≠veis por 9 , exibindo apenas os campos title e ratings .

// db.filmesExercises.find({$and: [{ratings: { $elemMatch: {$gt: 64, $lt: 105}}}, {ratings: {$mod: [9, 0]}}]});

// 9 - Retorne os filmes da categoria adventure e com ratings maior do que 103 , exibindo apenas os campos title , ratings e category .

db.filmesExercises.find({$and:[{category:"adventure"}, {ratings: {$gt: 103}}]}, { title: true, ratings: true, category: true, _id: false});
